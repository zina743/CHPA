Ցանցային հաղորդակցման համակարգի ծրագրային իրականացումը C++ լեզվով ներառում է ցանցային կապի հաստատման, տվյալների փոխանցման և ընդունման համար անհրաժեշտ մոդուլների ստեղծում։ C++ լեզուն համարվում է հզոր և արդյունավետ լեզու, որը օգտագործվում է ցանցային ծրագրավորման տարբեր ոլորտներում՝ ինչպես կիրառական ծրագրեր, այնպես էլ ցանցային լիցենզավորման և ինտերնետ-կապի համակարգեր։

Ներևում մենք կքննարկենք ցանցային հաղորդակցման հիմնական գաղափարներն ու տեխնոլոգիաները C++-ով, ինչպես նաև այն հարցերը, որոնք պետք է հաշվի առնել ցանցի ծրագրային իրականացման համար։

### 1. **C++ ցանցային ծրագրավորման հիմնական գաղափարներ**

C++-ով ցանցային հաղորդակցման ծրագրերի ստեղծումը սովորաբար ներառում է երկու հիմնական տեսակի հաղորդակցություն՝ **հետևյալների համաձայն**:

- **Սերվեր-հաճախորդ (Client-Server) մոդել**: Սերվերը սպասարկում է հաճախորդների հարցումները՝ միաժամանակ փոխանցելով և ընդունելով տվյալներ:
- **Peer-to-Peer (P2P) մոդել**: Տվյալները ուղարկվում և ստացվում են ոչ միայն սերվերի և հաճախորդի միջև, այլ նաև երկու ուղարկող կողմերի միջև անմիջականորեն:

C++ ծրագրավորումը ցանցային համակարգի ստեղծման մեջ ներառում է **Socket API**-ի օգտագործում, որը ցանցային հաղորդակցման հիմնական տեխնոլոգիաներից է:

### 2. **Socket API-ի հիմունքները**

C++-ում ցանցային հաղորդակցման համար ամենահաճախ օգտագործվող տեխնոլոգիաներից մեկը **socket programming**-ն է։ Socket-ը միավոր է, որը թույլ է տալիս երկու համակարգերի միջև հաղորդակցվել։ Socket API-ն հնարավորություն է տալիս ծրագրերին կապ հաստատել ցանցի վրա, ուղարկել տվյալներ և լսել (listen) ուղարկված հաղորդագրությունները։

#### C++-ով Socket-ի ստեղծում (Միացման հաստատում)

C++-ում միակցումը կարող է իրականացվել օգտագործելով **BSD Socket API**-ն կամ ավելի բարձր մակարդակի լիբրարիաներ, ինչպիսիք են **Boost.Asio** կամ **POCO C++ Libraries**։

Ստորև՝ համառոտ մի կապի ստեղծման օրինակ՝ TCP/IP շերտի վրա օգտագործելով `socket` API։

### 3. **Հաճախորդի (Client) և Սերվերի (Server) Կոդավորման Օրինակներ**

#### 3.1. **Սերվեր (Server) Կոդ**

Սերվերի կողմից հաճախորդներին սպասարկելու համար անհրաժեշտ է հետևել մի քանի քայլերի՝ ստեղծել socket, լսել կապերը, ընդունել հաճախորդի հաղորդագրություններ և պատասխանել դրանց:

```cpp
#include <iostream>
#include <winsock2.h>  // Windows-ում անհրաժեշտ է այս գրադարանը
#pragma comment(lib, "ws2_32.lib")  // Լիցենզավորման համար՝ Լիբրարիայի միացում

using namespace std;

int main() {
    WSADATA wsaData;
    SOCKET serverSocket, clientSocket;
    sockaddr_in serverAddr, clientAddr;
    int clientAddrSize = sizeof(clientAddr);
    char buffer[1024];

    // 1. Ինիցիալիզացում
    WSAStartup(MAKEWORD(2, 2), &wsaData);  // Windows-ում WSAStartup անհրաժեշտ է

    // 2. Սերվերի սոքեթի ստեղծում
    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == INVALID_SOCKET) {
        cerr << "Սոխեթի ստեղծումը ձախողվեց!" << endl;
        return 1;
    }

    // 3. Բացվածության հասցեի ստուգում
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;  // Լսել ցանկացած IP հասցեից
    serverAddr.sin_port = htons(8080);  // Կապի պորտ

    // 4. Սոխեթի կապումը հասցեի հետ
    bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr));

    // 5. Սերվերի սկսումը (լսելու режим)
    listen(serverSocket, 1);
    cout << "Սերվերը պատրաստ է լսելու..." << endl;

    // 6. Հաճախորդի կապը ընդունելը
    clientSocket = accept(serverSocket, (sockaddr*)&clientAddr, &clientAddrSize);
    if (clientSocket == INVALID_SOCKET) {
        cerr << "Հաճախորդի կապը չի հաստատվել!" << endl;
        return 1;
    }
    cout << "Հաճախորդը միացավ: " << inet_ntoa(clientAddr.sin_addr) << endl;

    // 7. Տվյալների ընդունում
    recv(clientSocket, buffer, sizeof(buffer), 0);
    cout << "Հաճախորդից ստացված հաղորդագրություն: " << buffer << endl;

    // 8. Տվյալների պատասխան
    send(clientSocket, "Սերլանում ընդունվեց հաղորդագրություն", 32, 0);

    // 9. Սոխեթի փակումը
    closesocket(clientSocket);
    closesocket(serverSocket);
    WSACleanup();

    return 0;
}
```

#### 3.2. **Հաճախորդ (Client) Կոդ**

Հաճախորդը կապվելու է սերվերին, ուղարկելու է տվյալներ և կստանա պատասխան:

```cpp
#include <iostream>
#include <winsock2.h>  // Windows-ում անհրաժեշտ է այս գրադարանը
#pragma comment(lib, "ws2_32.lib")

using namespace std;

int main() {
    WSADATA wsaData;
    SOCKET clientSocket;
    sockaddr_in serverAddr;
    char buffer[1024] = "Բարև Սերվեր!";

    // 1. Ինիցիալիզացում
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    // 2. Հաճախորդի սոխեթի ստեղծում
    clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == INVALID_SOCKET) {
        cerr << "Սոխեթի ստեղծումը ձախողվեց!" << endl;
        return 1;
    }

    // 3. Սերվերի հասցեի պատրաստում
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(8080);  // Սերվերի պորտ
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");  // Սերվերի IP հասցե

    // 4. Կապի հաստատում սերվերի հետ
    int connResult = connect(clientSocket, (sockaddr*)&serverAddr, sizeof(serverAddr));
    if (connResult == SOCKET_ERROR) {
        cerr << "Կապի հաստատումը ձախողվեց!" << endl;
        return 1;
    }

    // 5. Տվյալների ուղարկում
    send(clientSocket, buffer, sizeof(buffer), 0);

    // 6. Պատասխանի ընդունում
    recv(clientSocket, buffer, sizeof(buffer), 0);
    cout << "Սերվերից ստացված պատասխան: " << buffer << endl;

    // 7. Սոխեթի փակումը
    closesocket(clientSocket);
    WSACleanup();

    return 0;
}
```

### 4. **Կոդի բացատրություն**

- **Winsock**-ի (Windows Sockets) API օգտագործելը հնարավոր է ցանցային հաղորդակցում իրականացնելու համար։ Բոլոր Windows հիմքով ծրագրերում անհրաժեշտ է կատարել `WSAStartup` նախնական փուլը։
- **Socket** ստեղծվում է `socket(AF_INET, SOCK_STREAM, 0)` հրամանի միջոցով՝ որն աշխատում է TCP/IP պրոտոկոլի վրա։
- Սերվերը բացվում է `bind` հրամանով՝ տիրույթում վերցնելով չկապված պորտ։
- Սերվերն սկսում է լսել՝ `listen` հրամանով։
- Երբ հաճախորդը կապվում է, սերվերը ընդունում է կապը `accept`-ով և տիրույթը պատրաստ է հաղորդակցման։
- Հաճախորդը կարող է ուղարկել տվյալներ՝ օգտագործելով `send`, իսկ սերվերը՝ `recv`։

### 5. **Խորհուրդներ և Մեկնաբանություններ**

- Համոզվեք, որ սերվերն ու հաճախորդը գտնվում են նույն ցանցում կամ ունեն նույն IP հասցեն։ Որպես փորձ, կարող եք փորձարկել նույն համակարգում՝ օգտագործելով IP հասցե `127.0.0.1` (լոկալ հյուրընկալող)։
- C++-ի ցանցային ծրագրավորումը պահանջում է լավ ծանոթություն սոքեթների API-ին, ինչպես նաև այն, թե ինչպես է ցանցային հաղորդակցությունը աշխատում (TCP, UDP, IP):
- Հատկապես հիշեք՝ եթե C++-ով օգտագործում եք ավելի բարդ գործիքներ (Boost.Asio, POCO), ապա կծանոթանաք ավելի բարձր մակարդակի API-ների և շատ ավելին կկարողանաք իրականացնել ցանցային ծրագրավորման մեջ։

Այսպիսով, C++-ով ցանցային ծրագրի ստեղծման հիմունքներն են socket programming-ը, և ավելի բարդ ծրագրերը կարող են ներառել HTTP/
