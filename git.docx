Git համակարգը՝ որպես **distributed version control system (DVCS)**, մշակողների համար է ստեղծվել՝ հեշտացնելու նախագծերի տարբերակումը, վերանայելու համար կատարված փոփոխությունները, համագործակցության հնարավորություն ընձեռելու համար ու ընդհանրապես՝ ծրագրային նախագծերի հետ աշխատանքի արդյունավետությունը բարձրացնելու համար։ Այն թույլ է տալիս թիմերին համատեղ մշակել, համատեղել, հետևել յուրաքանչյուր փոփոխությանը, վերադարձնել նախորդ տարբերակներ և վերլուծել կատարած փոփոխությունները։

### Git-ի աշխատանքի հիմնական գաղափարը

Git-ը կառուցված է մի շարք հիմնական բաղադրիչներով, որոնք ապահովում են նախագծի վարկանիշի փոփոխությունների պատմությունը, մուտքի վերահսկողությունը և համատեղ մշակման գործընթացը։ Գործընթացը հասկանալու համար պետք է բացատրել որոշ հիմնարար սկզբունքներ։

### Git-ի բաղադրիչները

1. **Repository (ռեպոզիտորիա)**  
   Ռեպոզիտորիան (repository) Git-ի հիմնական պահոցն է, որտեղ պահպանվում է ողջ նախագծի պատմությունը։ Յուրաքանչյուր Git ռեպոզիտորիա ունի երկու հիմնական բաղադրիչներ՝ **work tree (աշխատանքի ծառ)** և **index (ինդեքս կամ staging area)**, որոնք թույլ են տալիս Git-ին հետևել այն փոփոխություններին, որոնք պատրաստվում են commit-ի։

   - **Local repository (տեղական ռեպոզիտորիա)** — դա այն տարածքն է, որը պահպանում է ամբողջ նախագծի պատմությունը՝ տեղական համակարգում։
   - **Remote repository (հեռակա ռեպոզիտորիա)** — դա այն պահոցն է, որն ապրում է վերբեռնված, օրինակ՝ GitHub-ում, GitLab-ում, Bitbucket-ում և այլն։

2. **Commit**  
   **Commit-ը** Git-ի ամենաբնորոշ գործողությունն է։ Այն ներկայացնում է ամբողջ ռեպոզիտորիայում փոփոխությունների հավաքածու՝ որոշակի պահին։ Commit-ը փաստորեն պահում է ծրագրի վիճակը՝ ինչպես մի ամբողջ բլոկ։ Commit-ը ունենում է անհատական գրառում (մեկնաբանություն)՝ փոփոխության պատճառը և այլ մանրամասներ։ Git-ը պահում է յուրաքանչյուր commit-ի պատմությունը՝ կապելով այն հեղինակին։

3. **Branch (շյուղ)**  
   Git-ի մեկ այլ կարևոր առանձնահատկությունը **branching-ը (շյուղերի ստեղծումը)**։ Շյուղը պարզապես կոդի տարբերակ է, որի միջոցով կարող եք աշխատել՝ առանց ազդելու հիմնական կոդի վրա։ Շյուղերի ստեղծման և միացման մեթոդները թույլ են տալիս նախագծի համար տարբեր գործառույթներ կամ ֆունկցիաներ աշխատել առանձին շյուղերում, իսկ հետո դրանք միացնել հիմնական կոդին՝ առանց փոփոխությունները խառնվելու։ Շյուղերն ու կոդի տարբերակը շատ հեշտ են կառավարվում Git-ի միջոցով։

4. **Staging Area (Ինդեքս)**  
   Git-ում **staging area**-ն (ինչպես նաև known as "index") այն տարածքն է, որտեղ մենք հավաքում ենք փոփոխությունները **commit**-ի համար։ Երբ մենք `git add` հրամանը կիրառում ենք ֆայլի կամ փոփոխության նկատմամբ, մենք դրանք տեղափոխում ենք staging area՝ նախքան commit-ի գործընթացը։ Սա հնարավորություն է տալիս մշակողին ընտրելու միայն որոշակի փոփոխությունները commit անել՝ բացարձակապես վերահսկելով, թե ինչ կոնկրետ փոփոխություններ պետք է պահպանվեն։

5. **Working Directory (աշխատանքի միջավայր)**  
   Git-ի **working directory**-ն այն վայրն է, որտեղ գործողությունները իրականացվում են։ Դա պարզապես այն տեղն է, որտեղ դուք կատարում եք կոդի փոփոխությունները։ Երբ դուք կատարում եք փոփոխություններ, դրանք ստանում են «չհաստատված» կամ «հաստատված չլինող» վիճակ՝ կախված նրանից՝ արդյոք դրանք արդեն ավելացվել են staging area-ի մեջ։

### Git-ի հիմնական գործողությունները

#### 1. **Գործողություններ աշխատանքի միջավայրում (Working Directory)**

- **Մշակել կամ փոփոխել ֆայլեր**։  
  Git-ը չի պահպանում այդ փոփոխությունները մինչև նրանք չեն ավելացվում staging area-ի մեջ։ Այս փուլում դուք կարող եք ավելացնել նոր ֆայլեր, փոխել կամ ջնջել արդեն գոյություն ունեցող ֆայլերը։

#### 2. **Ստեղծել Commit (հաստատում)**

- Երբ փոփոխություններն ավարտվում են, կարող եք դրանք կատարել **commit**։  
  Հրամանը `git add` տեղափոխում է փոփոխությունները staging area (օրինակ՝ որոշակի ֆայլեր կամ բոլոր ֆայլերը), իսկ հետո `git commit`-ը մուտքագրում է այս փոփոխությունները Git պատմության մեջ։ Commit-ը ստեղծում է նշում՝ այն փաստաթղթերի վերաբերյալ, որոնք տեղադրվել են՝ երբ կատարել եք փոփոխությունները։

#### 3. **Ավելացնել, փոփոխել կամ համատեղել (Push/Pull/Merge)**

- **Push**  
  Երբ commit-ը կատարվում է տեղական ռեպոզիտորիայում, այն դեռ չի հասել հեռակա սերվերին։ Հեռակա ռեպոզիտորիա ուղարկելու համար կիրառվում է `git push` հրաման։ Սա թույլ է տալիս անընդհատ պահել նախագծի վերջին տարբերակը և իրականացնել մոնիտորինգ՝ շատ աշխատակիցների հետ համատեղ։
  
- **Pull**  
  `git pull` հրամանը տեղադրում է վերջին փոփոխությունները Git-ի հեռակա սերվերից տեղական ռեպոզիտորիայում։ Այն համատեղում է այն փոփոխությունները, որոնք միացել են այլ մշակողների կողմից՝ ձեր տեղական մասնաճյուղում։

- **Merge**  
  Եթե մշակողներն աշխատում են տարբեր շյուղերում, նրանց փոփոխությունները պետք է միացնել (merge)։ Git-ը հնարավորություն է տալիս միացնել երկու կամ ավելի շյուղեր՝ առանց կոդի վերաշարադրումների։ Սա կարևոր է հատկապես այն ժամանակ, երբ թիմում աշխատող մարդիկ համատեղ օգտագործում են նույն ռեպոզիտորիան։

#### 4. **Մշակման ընթացք (Branching)**

- `git branch` հրամանը թույլ է տալիս դիտարկել բոլոր առկա շյուղերը։
- `git checkout`-ը կիրառվում է շյուղերի միջև փոփոխություն կատարելու համար։
- `git merge`-ը միացնում է երկու շյուղերը՝ կատարելով միավորման գործընթաց։

### Git-ի աշխատանքը մեկ օրինակով

1. **Հիմնական ռեպոզիտորիայի ստեղծում**  
   ```bash
   git init
   ```

2. **Գործողությունների ավելացում (բառեր փոփոխություն)**  
   ```bash
   echo "Hello World" > hello.txt
   git add hello.txt
   ```

3. **Commit-ի ստեղծում**  
   ```bash
   git commit -m "Add hello.txt file"
   ```

4. **Շյուղ ստեղծել և աշխատել այն վրա**  
   ```bash
   git branch new-feature
   git checkout new-feature
   ```

5. **Շյուղի միացում**  
   ```bash
   git checkout main
   git merge new-feature
   ```

Git-ը նախագծերի կառավարման շատ հզոր ու կարևոր գործիք է, որը աշխատում է արագ և արդյունավետ, ապահովելով մենեջմենթի և խմբերի միջում համատեղ մշակման հնարավորություն։
